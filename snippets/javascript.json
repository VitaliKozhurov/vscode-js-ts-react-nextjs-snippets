{
  "consoleLog": {
    "prefix": "clg.$clg.💡",
    "body": [
      "console.log(${1:data})"
    ],
    "description": "console.log",
    "scope": "javascript,javascriptreact"
  },
  "consoleLogWithLabel": {
    "prefix": "cll.$cll.clg(labelled).💡",
    "body": [
      "console.log('${1:data}', ${1:data})"
    ],
    "description": "console.log with label",
    "scope": "javascript,javascriptreact"
  },
  "consoleLogJSON": {
    "prefix": "clj.$clj.clg(json).💡",
    "body": [
      "console.log('${1:data}', JSON.stringify(${1:data}, null, 2))"
    ],
    "description": "console.log JSON",
    "scope": "javascript,javascriptreact"
  },
  "consoleInfo": {
    "prefix": "cin.$cin.💡",
    "body": [
      "console.info(${1:data})"
    ],
    "description": "console.info",
    "scope": "javascript,javascriptreact"
  },
  "consoleWarn": {
    "prefix": "cwa.$cwa.💡",
    "body": [
      "console.warn(${1:data})"
    ],
    "description": "console.warn",
    "scope": "javascript,javascriptreact"
  },
  "consoleError": {
    "prefix": "cer.$cer.💡",
    "body": [
      "console.error(${1:data})"
    ],
    "description": "console.error",
    "scope": "javascript,javascriptreact"
  },
  "consoleTable": {
    "prefix": "ctl.$ctl.💡",
    "body": [
      "console.table(${1:data})"
    ],
    "description": "console.table",
    "scope": "javascript,javascriptreact"
  },
  "consoleDir": {
    "prefix": "cdi.$cdi.💡",
    "body": [
      "console.dir(${1:data})"
    ],
    "description": "console.dir",
    "scope": "javascript,javascriptreact"
  },
  "consoleCount": {
    "prefix": "cco.$cco.💡",
    "body": [
      "console.count(${1:data})"
    ],
    "description": "console.count",
    "scope": "javascript,javascriptreact"
  },
  "consoleGroup": {
    "prefix": "cgr.$cgr.💡",
    "body": [
      "console.group(${1:label})"
    ],
    "description": "console.group",
    "scope": "javascript,javascriptreact"
  },
  "consoleGroupEnd": {
    "prefix": "cge.$cge.💡",
    "body": [
      "console.groupEnd()"
    ],
    "description": "console.groupEnd",
    "scope": "javascript,javascriptreact"
  },
  "consoleClear": {
    "prefix": "ccl.$ccl.💡",
    "body": [
      "console.clear()"
    ],
    "description": "console.clear",
    "scope": "javascript,javascriptreact"
  },
  "setTimeout": {
    "prefix": "sto.$sto.💡",
    "body": [
      "setTimeout(() => {",
      "\t${2:// code}",
      "}, ${1:1000})",
      ""
    ],
    "description": "setTimeout",
    "scope": "javascript,javascriptreact"
  },
  "setInterval": {
    "prefix": "sti.$sti.💡",
    "body": [
      "setInterval(() => {",
      "\t${2:// code}",
      "}, ${1:1000})",
      ""
    ],
    "description": "setInterval",
    "scope": "javascript,javascriptreact"
  },
  "reactFunctionalComp": {
    "prefix": "rfc.$rfc.💡",
    "body": [
      "export default function ${1:${RELATIVE_FILEPATH/(^.+?(?=[\\/\\\\][^\\/\\\\]+[\\/\\\\][^\\/\\\\]+\\.[jt]sx?))|(\\.[jt]sx?$|[\\/\\\\](?:index|\\[).*|.+[\\/\\\\](?!(?:index|\\[))|[.\\-_\\/\\\\])|(\\w+)/${3:/capitalize}/g}}() {$0",
      "\treturn (",
      "\t\t<${2:div}>${3:$1 Component}</$2>",
      "\t)",
      "}",
      ""
    ],
    "description": "React Functional Component",
    "scope": "javascript,javascriptreact"
  },
  "reactFunctionalCompExport": {
    "prefix": "rfce.$rfce.💡",
    "body": [
      "function ${1:${RELATIVE_FILEPATH/(^.+?(?=[\\/\\\\][^\\/\\\\]+[\\/\\\\][^\\/\\\\]+\\.[jt]sx?))|(\\.[jt]sx?$|[\\/\\\\](?:index|\\[).*|.+[\\/\\\\](?!(?:index|\\[))|[.\\-_\\/\\\\])|(\\w+)/${3:/capitalize}/g}}() {$0",
      "\treturn (",
      "\t\t<${2:div}>${3:$1 Component}</$2>",
      "\t)",
      "}",
      "",
      "export default $1",
      ""
    ],
    "description": "React Functional Component",
    "scope": "javascript,javascriptreact"
  },
  "reactFunctionalCompWithPropTypes": {
    "prefix": "rfcp.$rfcp.💡",
    "body": [
      "import PropTypes from 'prop-types'",
      "",
      "export default function ${1:${RELATIVE_FILEPATH/(^.+?(?=[\\/\\\\][^\\/\\\\]+[\\/\\\\][^\\/\\\\]+\\.[jt]sx?))|(\\.[jt]sx?$|[\\/\\\\](?:index|\\[).*|.+[\\/\\\\](?!(?:index|\\[))|[.\\-_\\/\\\\])|(\\w+)/${3:/capitalize}/g}}() {$0",
      "\treturn (",
      "\t\t<${2:div}>${3:$1 Component}</$2>",
      "\t)",
      "}",
      "",
      "$1.propTypes = {}",
      ""
    ],
    "description": "React Functional Component with PropTypes",
    "scope": "javascript,javascriptreact"
  },
  "reactFunctionalCompWithPropTypesChildren": {
    "prefix": "rfcpch.$rfcpch.💡",
    "body": [
      "import PropTypes from 'prop-types'",
      "",
      "export default function ${1:${RELATIVE_FILEPATH/(^.+?(?=[\\/\\\\][^\\/\\\\]+[\\/\\\\][^\\/\\\\]+\\.[jt]sx?))|(\\.[jt]sx?$|[\\/\\\\](?:index|\\[).*|.+[\\/\\\\](?!(?:index|\\[))|[.\\-_\\/\\\\])|(\\w+)/${3:/capitalize}/g}}({ children }) {$0",
      "\treturn (",
      "\t\t<${2:div}>${3:{ children \\}}</$2>",
      "\t)",
      "}",
      "",
      "$1.propTypes = {",
      "\tchildren: PropTypes.node.isRequired",
      "}",
      ""
    ],
    "description": "React Functional Component with PropTypes",
    "scope": "javascript,javascriptreact"
  },
  "reactArrowFunctionComp": {
    "prefix": "rafc.$rafc.💡",
    "body": [
      "export const ${1:${RELATIVE_FILEPATH/(^.+?(?=[\\/\\\\][^\\/\\\\]+[\\/\\\\][^\\/\\\\]+\\.[jt]sx?))|(\\.[jt]sx?$|[\\/\\\\](?:index|\\[).*|.+[\\/\\\\](?!(?:index|\\[))|[.\\-_\\/\\\\])|(\\w+)/${3:/capitalize}/g}} = () => {$0",
      "\treturn (",
      "\t\t<${2:div}>${3:$1 Component}</$2>",
      "\t)",
      "}",
      ""
    ],
    "description": "React Arrow Function Component",
    "scope": "javascript,javascriptreact"
  },
  "reactArrowFunctionCompExport": {
    "prefix": "rafce.$rafce.💡",
    "body": [
      "const ${1:${RELATIVE_FILEPATH/(^.+?(?=[\\/\\\\][^\\/\\\\]+[\\/\\\\][^\\/\\\\]+\\.[jt]sx?))|(\\.[jt]sx?$|[\\/\\\\](?:index|\\[).*|.+[\\/\\\\](?!(?:index|\\[))|[.\\-_\\/\\\\])|(\\w+)/${3:/capitalize}/g}} = () => {$0",
      "\treturn (",
      "\t\t<${2:div}>${3:$1 Component}</$2>",
      "\t)",
      "}",
      "",
      "export default $1",
      ""
    ],
    "description": "React Arrow Function Component",
    "scope": "javascript,javascriptreact"
  },
  "reactArrowFunctionCompWithPropTypes": {
    "prefix": "rafcp.$rafcp.💡",
    "body": [
      "import PropTypes from 'prop-types'",
      "",
      "const ${1:${RELATIVE_FILEPATH/(^.+?(?=[\\/\\\\][^\\/\\\\]+[\\/\\\\][^\\/\\\\]+\\.[jt]sx?))|(\\.[jt]sx?$|[\\/\\\\](?:index|\\[).*|.+[\\/\\\\](?!(?:index|\\[))|[.\\-_\\/\\\\])|(\\w+)/${3:/capitalize}/g}} = () => {$0",
      "\treturn (",
      "\t\t<${2:div}>${3:$1 Component}</$2>",
      "\t)",
      "}",
      "",
      "$1.propTypes = {}",
      "",
      "export default $1",
      ""
    ],
    "description": "React Arrow Function Component with PropTypes",
    "scope": "javascript,javascriptreact"
  },
  "reactArrowFunctionCompWithPropTypesChildren": {
    "prefix": "rafcpch.$rafcpch.💡",
    "body": [
      "import PropTypes from 'prop-types'",
      "",
      "const ${1:${RELATIVE_FILEPATH/(^.+?(?=[\\/\\\\][^\\/\\\\]+[\\/\\\\][^\\/\\\\]+\\.[jt]sx?))|(\\.[jt]sx?$|[\\/\\\\](?:index|\\[).*|.+[\\/\\\\](?!(?:index|\\[))|[.\\-_\\/\\\\])|(\\w+)/${3:/capitalize}/g}} = ({ children }) => {$0",
      "\treturn (",
      "\t\t<${2:div}>${3:{ children \\}}</$2>",
      "\t)",
      "}",
      "",
      "$1.propTypes = {",
      "\tchildren: PropTypes.node.isRequired",
      "}",
      "",
      "export default $1",
      ""
    ],
    "description": "React Arrow Function Component with PropTypes",
    "scope": "javascript,javascriptreact"
  },
  "useState": {
    "prefix": "useState.$useState.💡",
    "body": [
      "const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState$3($2)"
    ],
    "description": "React useState",
    "scope": "javascript,javascriptreact"
  },
  "useRef": {
    "prefix": "useRef.$useRef.💡",
    "body": [
      "const ${1:ref} = useRef$3(${2:null})"
    ],
    "description": "React useRef",
    "scope": "javascript,javascriptreact"
  },
  "useReducer": {
    "prefix": "useReducer.$useReducer.💡",
    "body": [
      "const [state, dispatch] = useReducer$3(${1:reducer}, ${2:null})"
    ],
    "description": "React useReducer",
    "scope": "javascript,javascriptreact"
  },
  "useEffect": {
    "prefix": "useEffect.$useEffect.💡",
    "body": [
      "useEffect$3(() => {",
      "\t${1:// code}",
      "}, [$2])",
      ""
    ],
    "description": "React useEffect",
    "scope": "javascript,javascriptreact"
  },
  "useEffectV2": {
    "prefix": "useEffectV2.$useEffectV2.💡",
    "body": [
      "useEffect$4(() => {",
      "\t${1:// code}",
      "",
      "\treturn () => {",
      "\t\t${3:// cleanup}",
      "\t}",
      "}, [$2])",
      ""
    ],
    "description": "React useEffect with cleanup",
    "scope": "javascript,javascriptreact"
  },
  "useLayoutEffect": {
    "prefix": "useLayoutEffect.$useLayoutEffect.💡",
    "body": [
      "useLayoutEffect$3(() => {",
      "\t${1:// code}",
      "}, [$2])",
      ""
    ],
    "description": "React useLayoutEffect",
    "scope": "javascript,javascriptreact"
  },
  "useLayoutEffectV2": {
    "prefix": "useLayoutEffectV2.$useLayoutEffectV2.💡",
    "body": [
      "useLayoutEffect$4(() => {",
      "\t${1:// code}",
      "",
      "\treturn () => {",
      "\t\t${3:// cleanup}",
      "\t}",
      "}, [$2])",
      ""
    ],
    "description": "React useLayoutEffect with cleanup",
    "scope": "javascript,javascriptreact"
  },
  "useMemo": {
    "prefix": "useMemo.$useMemo.💡",
    "body": [
      "useMemo$3(() => ${1:computeValue}, [$2])"
    ],
    "description": "React useMemo",
    "scope": "javascript,javascriptreact"
  },
  "useCallback": {
    "prefix": "useCallback.$useCallback.💡",
    "body": [
      "useCallback$3(() => {",
      "\t${1:// code}",
      "}, [$2])",
      ""
    ],
    "description": "React useCallback",
    "scope": "javascript,javascriptreact"
  },
  "reactCustomHook": {
    "prefix": "rfhook.$rfhook.hook.💡",
    "body": [
      "import { useEffect } from 'react'",
      "",
      "export default function ${1:${RELATIVE_FILEPATH/(^.+?(?=[\\/\\\\][^\\/\\\\]+[\\/\\\\][^\\/\\\\]+\\.[jt]sx?))|(\\.[jt]sx?$|[\\/\\\\](?:index|\\[).*|.+[\\/\\\\](?!(?:index|\\[))|[.\\-_\\/\\\\])|([\\w\\-_]*)/${3:/camelcase}/g}}() {",
      "\t${0:// code}",
      "\t",
      "\tuseEffect(() => {",
      "\t\t// code",
      "\t}, [])",
      "\t",
      "\treturn null",
      "}"
    ],
    "description": "React create custom hook",
    "scope": "javascript,javascriptreact"
  },
  "reactCustomHookArrowFunction": {
    "prefix": "rafhook.$rafhook.hook.💡",
    "body": [
      "import { useEffect } from 'react'",
      "",
      "const ${1:${RELATIVE_FILEPATH/(^.+?(?=[\\/\\\\][^\\/\\\\]+[\\/\\\\][^\\/\\\\]+\\.[jt]sx?))|(\\.[jt]sx?$|[\\/\\\\](?:index|\\[).*|.+[\\/\\\\](?!(?:index|\\[))|[.\\-_\\/\\\\])|([\\w\\-_]*)/${3:/camelcase}/g}} = () => {",
      "\t${0:// code}",
      "\t",
      "\tuseEffect(() => {",
      "\t\t// code",
      "\t}, [])",
      "\t",
      "\treturn null",
      "}",
      "",
      "export default $1"
    ],
    "description": "React create custom hook",
    "scope": "javascript,javascriptreact"
  },
  "nextGSS": {
    "prefix": "nxGSS.$nxGSS.getServerSideProps.💡",
    "body": [
      "export async function getServerSideProps(${1:{ req, res, params, query \\}}) {",
      "\t${0:// code}",
      "",
      "\treturn {",
      "\t\tprops: {},",
      "\t}",
      "}",
      ""
    ],
    "description": "Next.js getServerSideProps",
    "scope": "javascript,javascriptreact"
  },
  "nextGST": {
    "prefix": "nxGST.$nxGST.getStaticProps.💡",
    "body": [
      "export async function getStaticProps(${1:{ params \\}}) {",
      "\t${0:// code}",
      "",
      "\treturn {",
      "\t\tprops: {},",
      "\t}",
      "}",
      ""
    ],
    "description": "Next.js getStaticProps",
    "scope": "javascript,javascriptreact"
  },
  "nextGSP": {
    "prefix": "nxGSP.$nxGSP.getStaticPaths.💡",
    "body": [
      "export async function getStaticPaths() {",
      "\t${0:// code}",
      "",
      "\treturn {",
      "\t\tpaths: [],",
      "\t\tfallback: ${1|true,false,'blocking'|},",
      "\t}",
      "}",
      ""
    ],
    "description": "Next.js getStaticPaths",
    "scope": "javascript,javascriptreact"
  },
  "nextPageGSS": {
    "prefix": "nxpGSS.$nxpGSS.💡",
    "body": [
      "export async function getServerSideProps(${2:{ req, res, params, query \\}}) {",
      "\t${0:// code}",
      "",
      "\treturn {",
      "\t\tprops: {},",
      "\t}",
      "}",
      "",
      "export default function ${1:${RELATIVE_FILEPATH/(^.+?(?=[\\/\\\\][^\\/\\\\]+[\\/\\\\][^\\/\\\\]+\\.[jt]sx?))|(\\.[jt]sx?$|[\\/\\\\](?:index|\\[).*|.+[\\/\\\\](?!(?:index|\\[))|[.\\-_\\/\\\\])|(\\w+)/${3:/capitalize}/g}Page}() {",
      "\treturn (",
      "\t\t<>",
      "\t\t\t$1 content",
      "\t\t</>",
      "\t)",
      "}",
      ""
    ],
    "description": "Next.js page with getServerSideProps",
    "scope": "javascript,javascriptreact"
  },
  "nextPageGST": {
    "prefix": "nxpGST.$nxpGST.💡",
    "body": [
      "export async function getStaticProps(${2:{ params \\}}) {",
      "\t${0:// code}",
      "",
      "\treturn {",
      "\t\tprops: {},",
      "\t}",
      "}",
      "",
      "export default function ${1:${RELATIVE_FILEPATH/(^.+?(?=[\\/\\\\][^\\/\\\\]+[\\/\\\\][^\\/\\\\]+\\.[jt]sx?))|(\\.[jt]sx?$|[\\/\\\\](?:index|\\[).*|.+[\\/\\\\](?!(?:index|\\[))|[.\\-_\\/\\\\])|(\\w+)/${3:/capitalize}/g}Page}() {",
      "\treturn (",
      "\t\t<>",
      "\t\t\t$1 content",
      "\t\t</>",
      "\t)",
      "}",
      ""
    ],
    "description": "Next.js page with getStaticProps",
    "scope": "javascript,javascriptreact"
  },
  "nextGSSArrowFunction": {
    "prefix": "nxaGSS.$nxaGSS.getServerSideProps.💡",
    "body": [
      "export const getServerSideProps = async (${1:{ req, res, params, query \\}}) => {",
      "\t${0:// code}",
      "",
      "\treturn {",
      "\t\tprops: {},",
      "\t}",
      "}",
      ""
    ],
    "description": "Next.js getServerSideProps arrow function",
    "scope": "javascript,javascriptreact"
  },
  "nextGSTArrowFunction": {
    "prefix": "nxaGST.$nxaGST.getStaticProps.💡",
    "body": [
      "export const getStaticProps = async (${1:{ params \\}}) => {",
      "\t${0:// code}",
      "",
      "\treturn {",
      "\t\tprops: {},",
      "\t}",
      "}",
      ""
    ],
    "description": "Next.js getStaticProps arrow function",
    "scope": "javascript,javascriptreact"
  },
  "nextGSPArrowFunction": {
    "prefix": "nxaGSP.$nxaGSP.getStaticPaths.💡",
    "body": [
      "export const getStaticPaths = async () => {",
      "\t${0:// code}",
      "",
      "\treturn {",
      "\t\tpaths: [],",
      "\t\tfallback: ${1|true,false,'blocking'|},",
      "\t}",
      "}",
      ""
    ],
    "description": "Next.js getStaticPaths arrow function",
    "scope": "javascript,javascriptreact"
  },
  "nextPageGSSArrowFunction": {
    "prefix": "nxpaGSS.$nxpaGSS.💡",
    "body": [
      "export const getServerSideProps = async (${2:{ req, res, params, query \\}}) => {",
      "\t${0:// code}",
      "",
      "\treturn {",
      "\t\tprops: {},",
      "\t}",
      "}",
      "",
      "const ${1:${RELATIVE_FILEPATH/(^.+?(?=[\\/\\\\][^\\/\\\\]+[\\/\\\\][^\\/\\\\]+\\.[jt]sx?))|(\\.[jt]sx?$|[\\/\\\\](?:index|\\[).*|.+[\\/\\\\](?!(?:index|\\[))|[.\\-_\\/\\\\])|(\\w+)/${3:/capitalize}/g}Page} = () => {",
      "\treturn (",
      "\t\t<>",
      "\t\t\t$1 content",
      "\t\t</>",
      "\t)",
      "}",
      "",
      "export default $1",
      ""
    ],
    "description": "Next.js page with getServerSideProps",
    "scope": "javascript,javascriptreact"
  },
  "nextPageGSTArrowFunction": {
    "prefix": "nxpaGST.$nxpaGST.💡",
    "body": [
      "export const getStaticProps = async (${2:{ params \\}}) => {",
      "\t${0:// code}",
      "",
      "\treturn {",
      "\t\tprops: {},",
      "\t}",
      "}",
      "",
      "const ${1:${RELATIVE_FILEPATH/(^.+?(?=[\\/\\\\][^\\/\\\\]+[\\/\\\\][^\\/\\\\]+\\.[jt]sx?))|(\\.[jt]sx?$|[\\/\\\\](?:index|\\[).*|.+[\\/\\\\](?!(?:index|\\[))|[.\\-_\\/\\\\])|(\\w+)/${3:/capitalize}/g}Page} = () => {",
      "\treturn (",
      "\t\t<>",
      "\t\t\t$1 content",
      "\t\t</>",
      "\t)",
      "}",
      "",
      "export default $1",
      ""
    ],
    "description": "Next.js page with getStaticProps",
    "scope": "javascript,javascriptreact"
  },
  "nextUseRouter": {
    "prefix": "nxUseRouter.$nxUseRouter.useRouter.💡",
    "body": [
      "const { ${1:pathname, query} } = useRouter$2()"
    ],
    "description": "Next.js useRouter",
    "scope": "javascript,javascriptreact"
  },
  "nextLinkComponent": {
    "prefix": "nxLink.$nxLink.💡",
    "body": [
      "<Link href=$1>",
      "\t<a>${2:LinkText}</a>",
      "</Link>"
    ],
    "description": "Next.js Link component",
    "scope": "javascript,javascriptreact"
  },
  "rqUseQuery": {
    "prefix": "rqUseQuery.$rqUseQuery.useQuery.💡",
    "body": [
      "const { isLoading, data, error } = ${2:useQuery}$3($1)",
      ""
    ],
    "description": "React Query useQuery",
    "scope": "javascript,javascriptreact"
  },
  "rqLDE": {
    "prefix": "rqLDE.$rqLDE.💡",
    "body": [
      "if (isLoading) {",
      "\treturn <div>⏳ Loading</div>",
      "}",
      "",
      "if (data) {",
      "\treturn <div>🎉 Yay!</div>",
      "}",
      "",
      "return <div>🚫 Nay! ({error.message})</div>"
    ],
    "description": "React Query Loading-Data-Error pattern",
    "scope": "javascript,javascriptreact"
  },
  "rqUseQueryLDE": {
    "prefix": "rqUseQueryLDE.$rqUseQueryLDE.useQueryLDE.💡",
    "body": [
      "const { isLoading, data, error } = ${2:useQuery}$3($1)",
      "",
      "if (isLoading) {",
      "\treturn <div>⏳ Loading</div>",
      "}",
      "",
      "if (data) {",
      "\treturn <div>🎉 Yay!</div>",
      "}",
      "",
      "return <div>🚫 Nay! ({error.message})</div>"
    ],
    "description": "React Query useQuery with Loading-Data-Error pattern",
    "scope": "javascript,javascriptreact"
  },
  "rqLED": {
    "prefix": "rqLED.$rqLED.💡",
    "body": [
      "if (isLoading) {",
      "\treturn <div>⏳ Loading</div>",
      "}",
      "",
      "if (error) {",
      "\treturn <div>🚫 Nay! ({error.message})</div>",
      "}",
      "",
      "return <div>🎉 Yay!</div>"
    ],
    "description": "React Query Loading-Error-Data pattern",
    "scope": "javascript,javascriptreact"
  },
  "rqUseQueryLED": {
    "prefix": "rqUseQueryLED.$rqUseQueryLED.useQueryLED.💡",
    "body": [
      "const { isLoading, error, data } = ${2:useQuery}$3($1)",
      "",
      "if (isLoading) {",
      "\treturn <div>⏳ Loading</div>",
      "}",
      "",
      "if (error) {",
      "\treturn <div>🚫 Nay! ({error.message})</div>",
      "}",
      "",
      "return <div>🎉 Yay!</div>"
    ],
    "description": "React Query useQuery with Loading-Error-Data pattern",
    "scope": "javascript,javascriptreact"
  },
  "rqUseMutation": {
    "prefix": "rqUseMutation.$rqUseMutation.useMutation.💡",
    "body": [
      "const { mutate, isLoading } = ${2:useMutation}$3($1)",
      ""
    ],
    "description": "React Query useMutation",
    "scope": "javascript,javascriptreact"
  },
  "rhfUseForm": {
    "prefix": "rhf.$rhf.useForm.💡",
    "body": [
      "const { ${1:register, control, handleSubmit, formState: { errors \\}} } = useForm$2($0)",
      "const onSubmit = data => console.log(data)"
    ],
    "description": "React Hook Form `useForm` hook",
    "scope": "javascript,javascriptreact"
  },
  "rhfUseFormYup": {
    "prefix": "rhfYup.$rhfYup.useForm.💡",
    "body": [
      "const schema = yup$4.object({",
      "\t${3:// schema fields}",
      "}).required()",
      "",
      "const { ${1:register, control, handleSubmit, formState: { errors \\}} } = useForm$2({",
      "\tresolver: yupResolver(schema)",
      "})",
      "const onSubmit = data => console.log(data)"
    ],
    "description": "React Hook Form `useForm` hook with yupResolver",
    "scope": "javascript,javascriptreact"
  },
  "rhfCreateFormProvider": {
    "prefix": "rhfProv.$rhfProv.useForm.💡",
    "body": [
      "const methods = useForm$1($2)",
      "const onSubmit = data => console.log(data)",
      "",
      "return (",
      "\t<FormProvider {...methods} >",
      "\t\t<form onSubmit={methods.handleSubmit(onSubmit)}>",
      "\t\t\t${0:<NestedInputs />}",
      "\t\t</form>",
      "\t</FormProvider>",
      ")"
    ],
    "description": "React Hook Form create form with `FormProvider`",
    "scope": "javascript,javascriptreact"
  },
  "zuCreate": {
    "prefix": "zuc.$zuc.💡",
    "body": [
      "import create from 'zustand'",
      "",
      "const use${1:Store} = create((set) => ({",
      "\t${0:// code}",
      "}))",
      "",
      "export default use$1"
    ],
    "description": "Zustand create store",
    "scope": "javascript,javascriptreact"
  },
  "zuCreateImmer": {
    "prefix": "zuci.$zuci.💡",
    "body": [
      "import create from 'zustand'",
      "import { immer } from 'zustand/middleware/immer'",
      "",
      "const use${1:Store} = create(immer((set) => ({",
      "\t${0:// code}",
      "})))",
      "",
      "export default use$1"
    ],
    "description": "Zustand create store",
    "scope": "javascript,javascriptreact"
  },
  "zuUse": {
    "prefix": "zuu.$zuu.💡",
    "body": [
      "const ${2:bears} = use${1:Store}(state => state.$2)"
    ],
    "description": "Zustand useStore",
    "scope": "javascript,javascriptreact"
  },
  "zuUsePickObj": {
    "prefix": "zuuObj.$zuuObj.💡",
    "body": [
      "const { ${2:nuts}, ${3:honey} } = use${1:Store}(state => ({ $2: state.$2, $3: state.$3 }), shallow$4)"
    ],
    "description": "Zustand useStore with shallow",
    "scope": "javascript,javascriptreact"
  },
  "zuUsePickArr": {
    "prefix": "zuuArr.$zuuArr.💡",
    "body": [
      "const [${2:nuts}, ${3:honey}] = use${1:Store}(state => [state.$2, state.$3], shallow$4)"
    ],
    "description": "Zustand useStore with shallow",
    "scope": "javascript,javascriptreact"
  },
  "tdesc": {
    "prefix": "tdescribe.$tdescribe.describe(test).💡",
    "body": [
      "describe('${1:${RELATIVE_FILEPATH/(^.+?(?=[\\/\\\\][^\\/\\\\]+[\\/\\\\][^\\/\\\\]+\\.[jt]sx?))|(\\.[jt]sx?$|[\\/\\\\](?:index|\\[).*|.+[\\/\\\\](?!(?:index|\\[))|[.\\-_\\/\\\\])|(\\w+)/${3:/capitalize}/g}}', () => {",
      "\t${0:// code}",
      "})"
    ],
    "description": "Testing `describe` block",
    "scope": "javascript,javascriptreact"
  },
  "tit": {
    "prefix": "tit.$tit.it(test).💡",
    "body": [
      "it('should ${1:work}', ${2:async }() => {",
      "\t${0:// code}",
      "})"
    ],
    "description": "Testing `it` block",
    "scope": "javascript,javascriptreact"
  },
  "tbefore": {
    "prefix": "tbefore.$tbefore.before(test).💡",
    "body": [
      "${1|beforeEach,beforeAll|}(() => {",
      "\t${0:// code}",
      "})"
    ],
    "description": "Testing `beforeAll` / `beforeEach` block",
    "scope": "javascript,javascriptreact"
  },
  "tafter": {
    "prefix": "tafter.$tafter.after(test).💡",
    "body": [
      "${1|afterEach,afterAll|}(() => {",
      "\t${0:// code}",
      "})"
    ],
    "description": "Testing `afterAll` / `afterEach` block",
    "scope": "javascript,javascriptreact"
  },
  "wrapWithFragment": {
    "prefix": "_frag.$_frag.wrap.💡",
    "body": [
      "<$1$0>",
      "\t${TM_SELECTED_TEXT}",
      "</$1>"
    ],
    "description": "Wrap component with Fragment",
    "scope": "javascript,javascriptreact"
  },
  "wrapWithJsonStringify": {
    "prefix": "_js.$_js.wrap.💡",
    "body": [
      "JSON.stringify(${TM_SELECTED_TEXT})"
    ],
    "description": "Wrap with `JSON.stringify`",
    "scope": "javascript,javascriptreact"
  },
  "wrapWithJsonParse": {
    "prefix": "_jp.$_jp.wrap.💡",
    "body": [
      "JSON.parse(${TM_SELECTED_TEXT})"
    ],
    "description": "Wrap with `JSON.parse`",
    "scope": "javascript,javascriptreact"
  },
  "generateInterface": {
    "prefix": "genInt.$genInt.💡",
    "body": [
      "interface ${1:MyInterface} {",
      "${CLIPBOARD/(\\=\\s*[^,]*),?|(\\w+)|(\\s*),?/${2:+  }$2${2:+: unknown;\n}/gm}}",
      ""
    ],
    "description": "From clipboard parameters: generate interface",
    "scope": "javascript,javascriptreact"
  },
  "generateType": {
    "prefix": "genType.$genType.💡",
    "body": [
      "type ${1:MyType} = {",
      "${CLIPBOARD/(\\=\\s*[^,]*),?|(\\w+)|(\\s*),?/${2:+  }$2${2:+: unknown;\n}/gm}}",
      ""
    ],
    "description": "From clipboard parameters: generate type",
    "scope": "javascript,javascriptreact"
  },
  "generatePropTypes": {
    "prefix": "genPropTypes.$genPropTypes.💡",
    "body": [
      "${1:MyComponent}.propTypes = {",
      "${CLIPBOARD/(\\=\\s*[^,]*),?|(\\w+)|(\\s*),?/${2:+  }$2${2:+: PropTypes.any,\n}/gm}}",
      ""
    ],
    "description": "From clipboard parameters: generate PropTypes",
    "scope": "javascript,javascriptreact"
  }
}